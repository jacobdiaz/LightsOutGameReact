{"map":"{\"version\":3,\"sources\":[\"/Users/Jacob/LocalDevelopment/React/ReactBootcamp/react-lights-out-starter/src/Cell.js\",\"/Users/Jacob/LocalDevelopment/React/ReactBootcamp/react-lights-out-starter/src/Board.js\",\"/Users/Jacob/LocalDevelopment/React/ReactBootcamp/react-lights-out-starter/src/App.js\",\"/Users/Jacob/LocalDevelopment/React/ReactBootcamp/react-lights-out-starter/src/serviceWorker.js\",\"/Users/Jacob/LocalDevelopment/React/ReactBootcamp/react-lights-out-starter/src/index.js\"],\"names\":[\"Cell\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"handleClick\",\"bind\",\"assertThisInitialized\",\"evt\",\"flipCellsAroundMe\",\"classes\",\"isLit\",\"react_default\",\"a\",\"createElement\",\"className\",\"onClick\",\"Component\",\"Board\",\"state\",\"hasWon\",\"board\",\"createBoard\",\"i\",\"nrows\",\"row\",\"j\",\"ncols\",\"push\",\"Math\",\"random\",\"changeLightStartsOn\",\"coord\",\"_this$props\",\"_coord$split$map\",\"split\",\"map\",\"Number\",\"_coord$split$map2\",\"slicedToArray\",\"tableBoard\",\"concat\",\"src_Cell_0\",\"key\",\"defaultProps\",\"App\",\"src_Board_0\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"qTAsCeA,qBApBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAA,OAAAQ,EAAA,EAAAR,CAAAD,KAFFA,2EAKPU,GAEVP,KAAKJ,MAAMY,qDAIX,IAAIC,EAAU,QAAUT,KAAKJ,MAAMc,MAAQ,YAAc,IAEzD,OACIC,EAAAC,EAAAC,cAAA,KAAA,CAAIC,UAAWL,EAASM,QAASf,KAAKI,qBAf3BY,EAAAA,YCabC,qBAOJ,SAAAA,EAAYrB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiB,IACjBpB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmB,GAAAd,KAAAH,KAAMJ,KAEDsB,MAAQ,CACXC,QAAQ,EACRC,MAAOvB,EAAKwB,eALGxB,6EAajB,IADA,IAAIuB,EAAQ,GACHE,EAAI,EAAGA,EAAItB,KAAKJ,MAAM2B,MAAOD,IAAK,CAEzC,IADA,IAAIE,EAAM,GACDC,EAAI,EAAGA,EAAIzB,KAAKJ,MAAM8B,MAAOD,IACpCD,EAAIG,KAAKC,KAAKC,SAAW7B,KAAKJ,MAAMkC,qBAEtCV,EAAMO,KAAKH,GAEb,OAAOJ,0CAKOW,GAAO,IAAAC,EACEhC,KAAKJ,MADPqC,GAAAD,EACfN,MADeM,EACRT,MACDvB,KAAKkB,MAAME,MACVW,EAAMG,MAAM,KAAKC,IAAIC,SAHbC,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAmC,EAAA,GAAAI,EAAA,GAAAA,EAAA,oCAuBrB,IACIf,EAAEG,EADFc,EAAa,GAEjB,IAAIjB,EAAE,EAAGA,EAAItB,KAAKJ,MAAM2B,MAAOD,IAAI,CACjC,IAAIE,EAAM,GACV,IAAKC,EAAE,EAAGA,EAAIzB,KAAKJ,MAAM8B,MAAOD,IAAI,CAClC,IAAIM,EAAK,GAAAS,OAAMlB,EAAN,KAAAkB,OAAWf,GACpBD,EAAIG,KAAKhB,EAAAC,EAAAC,cAAC4B,EAAD,CAAMC,IAAKX,EAAOrB,MAAOV,KAAKkB,MAAME,MAAME,GAAGG,MAExDc,EAAWZ,KAAKhB,EAAAC,EAAAC,cAAA,KAAA,CAAI6B,IAAKjB,GAAID,IAE/B,OACEb,EAAAC,EAAAC,cAAA,QAAA,CAAOC,UAAU,SACfH,EAAAC,EAAAC,cAAA,QAAA,KAAQ0B,WAnEIvB,EAAAA,YAAdC,EAEG0B,aAAe,CACpBpB,MAAO,EACPG,MAAO,EACPI,oBAAqB,KAoEVb,IAAAA,EAAAA,ECvFA2B,0LARX,OACEjC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgC,EAAD,cAJU7B,EAAAA,YCME8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, {Component} from 'react'\\nimport \\\"./Cell.css\\\"\\n\\n\\n/** A single cell on the board.\\n *\\n * This has no state --- just two props:\\n *\\n * - flipCellsAroundMe: a function rec'd from the board which flips this\\n *      cell and the cells around of it\\n *\\n * - isLit: boolean, is this cell lit?\\n *\\n * This handles clicks --- by calling flipCellsAroundMe\\n *\\n **/\\n\\nclass Cell extends Component {\\n  constructor(props) {\\n    super(props);\\n    this.handleClick = this.handleClick.bind(this);\\n  }\\n\\n  handleClick(evt) {\\n    // call up to the board to flip cells around this cell\\n    this.props.flipCellsAroundMe();\\n  }\\n\\n  render() {\\n    let classes = \\\"Cell\\\" + (this.props.isLit ? \\\" Cell-lit\\\" : \\\"\\\");\\n\\n    return (\\n        <td className={classes} onClick={this.handleClick} />\\n    )\\n  }\\n}\\n\\n\\nexport default Cell\",\"import React, { Component } from 'react';\\nimport Cell from './Cell';\\nimport './Board.css';\\n\\n/** Game board of Lights out.\\n *\\n * Properties:\\n *\\n * - nrows: number of rows of board\\n * - ncols: number of cols of board\\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\\n *\\n * State:\\n *\\n * - hasWon: boolean, true when board is all off\\n * - board: array-of-arrays of true/false\\n *\\n *    For this board:\\n *       .  .  .\\n *       O  O  .     (where . is off, and O is on)\\n *       .  .  .\\n *\\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\\n *\\n *  This should render an HTML table of individual <Cell /> components.\\n *\\n *  This doesn't handle any clicks --- clicks are on individual cells\\n *\\n **/\\n\\nclass Board extends Component {\\n  //? Create a default constructor\\n  static defaultProps = {\\n    nrows: 5,\\n    ncols: 5,\\n    changeLightStartsOn: 0.25\\n  };\\n  constructor(props) {\\n    super(props);\\n    //? Create initial state\\n    this.state = {\\n      hasWon: false,\\n      board: this.createBoard()\\n    };\\n  }\\n\\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\\n\\n  createBoard() {\\n    let board = [];\\n    for (let i = 0; i < this.props.nrows; i++) {\\n      let row = [];\\n      for (let j = 0; j < this.props.ncols; j++) {\\n        row.push(Math.random() < this.props.changeLightStartsOn); // will push true if the rand is < 0.25\\n      }\\n      board.push(row);\\n    }\\n    return board;\\n  }\\n\\n  /** handle changing a cell: update board & determine if winner */\\n\\n  flipCellsAround(coord) {\\n    let { ncols, nrows } = this.props;\\n    let board = this.state.board;\\n    let [y, x] = coord.split('-').map(Number);\\n\\n    function flipCell(y, x) {\\n      // if this coord is actually on board, flip it\\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\\n        board[y][x] = !board[y][x];\\n      }\\n    }\\n\\n    // TODO: flip this cell and the cells around it\\n\\n    // win when every cell is turned off\\n    // TODO: determine is the game has been won\\n\\n    // this.setState({board, hasWon});\\n  }\\n\\n  /** Render game board or winning message. */\\n\\n  render() {\\n    let tableBoard = [];\\n    let i,j;\\n    for(i=0; i < this.props.nrows; i++){\\n      let row = [];\\n      for( j=0; j < this.props.ncols; j++){\\n        let coord = `${i}-${j}`;\\n        row.push(<Cell key={coord} isLit={this.state.board[i][j]}/>);\\n      }\\n      tableBoard.push(<tr key={j}>{row}</tr>)\\n    }\\n    return (\\n      <table className=\\\"Board\\\">\\n        <tbody>{tableBoard}</tbody>\\n      </table>\\n    );\\n  }\\n}\\n\\nexport default Board;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport Board from \\\"./Board\\\";\\nimport \\\"./App.css\\\";\\n\\n/** Simple app that just shows the LightsOut game. */\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div className='App'>\\n        <Board/>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA.\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      if (\\n        response.status === 404 ||\\n        response.headers.get('content-type').indexOf('javascript') === -1\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{10:function(e,t,n){e.exports=n(23)},15:function(e,t,n){},17:function(e,t,n){},19:function(e,t,n){},21:function(e,t,n){},23:function(e,t,n){\"use strict\";n.r(t);var a=n(0),r=n.n(a),o=n(8),c=n.n(o),i=(n(15),n(1)),s=n(2),l=n(4),u=n(3),h=n(5),p=n(9),d=n(6),b=(n(17),function(e){function t(e){var n;return Object(i.a)(this,t),(n=Object(l.a)(this,Object(u.a)(t).call(this,e))).handleClick=n.handleClick.bind(Object(d.a)(Object(d.a)(n))),n}return Object(h.a)(t,e),Object(s.a)(t,[{key:\"handleClick\",value:function(e){this.props.flipCellsAroundMe()}},{key:\"render\",value:function(){var e=\"Cell\"+(this.props.isLit?\" Cell-lit\":\"\");return r.a.createElement(\"td\",{className:e,onClick:this.handleClick})}}]),t}(a.Component)),f=(n(19),function(e){function t(e){var n;return Object(i.a)(this,t),(n=Object(l.a)(this,Object(u.a)(t).call(this,e))).state={hasWon:!1,board:n.createBoard()},n}return Object(h.a)(t,e),Object(s.a)(t,[{key:\"createBoard\",value:function(){for(var e=[],t=0;t<this.props.nrows;t++){for(var n=[],a=0;a<this.props.ncols;a++)n.push(Math.random()<this.props.changeLightStartsOn);e.push(n)}return e}},{key:\"flipCellsAround\",value:function(e){var t=this.props,n=(t.ncols,t.nrows,this.state.board,e.split(\"-\").map(Number)),a=Object(p.a)(n,2);a[0],a[1]}},{key:\"render\",value:function(){var e,t,n=[];for(e=0;e<this.props.nrows;e++){var a=[];for(t=0;t<this.props.ncols;t++){var o=\"\".concat(e,\"-\").concat(t);a.push(r.a.createElement(b,{key:o,isLit:this.state.board[e][t]}))}n.push(r.a.createElement(\"tr\",{key:t},a))}return r.a.createElement(\"table\",{className:\"Board\"},r.a.createElement(\"tbody\",null,n))}}]),t}(a.Component));f.defaultProps={nrows:5,ncols:5,changeLightStartsOn:.25};var m=f,v=(n(21),function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(h.a)(t,e),Object(s.a)(t,[{key:\"render\",value:function(){return r.a.createElement(\"div\",{className:\"App\"},r.a.createElement(m,null))}}]),t}(a.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(r.a.createElement(v,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[10,2,1]]]);","extractedComments":[]}