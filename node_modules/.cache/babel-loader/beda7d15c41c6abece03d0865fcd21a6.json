{"ast":null,"code":"import _slicedToArray from \"/Users/Jacob/LocalDevelopment/React/ReactBootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/Jacob/LocalDevelopment/React/ReactBootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Jacob/LocalDevelopment/React/ReactBootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Jacob/LocalDevelopment/React/ReactBootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Jacob/LocalDevelopment/React/ReactBootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Jacob/LocalDevelopment/React/ReactBootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Jacob/LocalDevelopment/React/ReactBootcamp/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  //? Create a default constructor\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); //? Create initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          row.push(Math.random() < this.props.changeLightStartsOn); // will push true if the rand is < 0.25\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      console.log('Flipping', coord);\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split('-').map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var tableBoard = [];\n      var i, j;\n\n      for (i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        var _loop = function _loop() {\n          var coord = \"\".concat(i, \"-\").concat(j);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[i][j],\n            flipCellsAround: function flipCellsAround() {\n              return _this2.flipCellsAround(coord);\n            }\n          }));\n        };\n\n        for (j = 0; j < this.props.ncols; j++) {\n          _loop();\n        }\n\n        tableBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: j\n        }, row));\n      }\n\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\"\n      }, /*#__PURE__*/React.createElement(\"tbody\", null, tableBoard));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  changeLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/Users/Jacob/LocalDevelopment/React/ReactBootcamp/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","i","nrows","row","j","ncols","push","Math","random","changeLightStartsOn","coord","console","log","split","map","Number","y","x","flipCell","tableBoard","flipCellsAround","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,K;;;AACJ;AAMA,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN,GADiB,CAEjB;;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,KAAK,EAAE,MAAKC,WAAL;AAFI,KAAb;AAHiB;AAOlB;AAED;;;;;kCAEc;AACZ,UAAID,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWM,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,YAAIE,GAAG,GAAG,EAAV;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,KAAL,CAAWS,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCD,UAAAA,GAAG,CAACG,IAAJ,CAASC,IAAI,CAACC,MAAL,KAAgB,KAAKZ,KAAL,CAAWa,mBAApC,EADyC,CACiB;AAC3D;;AACDV,QAAAA,KAAK,CAACO,IAAN,CAAWH,GAAX;AACD;;AACD,aAAOJ,KAAP;AACD;AAED;;;;oCAEgBW,K,EAAO;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBF,KAAvB;AADqB,wBAEE,KAAKd,KAFP;AAAA,UAEfS,KAFe,eAEfA,KAFe;AAAA,UAERH,KAFQ,eAERA,KAFQ;AAGrB,UAAIH,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;AAHqB,6BAIRW,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAJQ;AAAA;AAAA,UAIhBC,CAJgB;AAAA,UAIbC,CAJa;;AAMrB,eAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;AACtB;AACA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGZ,KAAd,IAAuBW,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGd,KAAzC,EAAgD;AAC9CH,UAAAA,KAAK,CAACiB,CAAD,CAAL,CAASC,CAAT,IAAc,CAAClB,KAAK,CAACiB,CAAD,CAAL,CAASC,CAAT,CAAf;AACD;AACF,OAXoB,CAarB;AAEA;AACA;AAEA;;AACD;AAED;;;;6BAES;AAAA;;AACP,UAAIE,UAAU,GAAG,EAAjB;AACA,UAAIlB,CAAJ,EAAMG,CAAN;;AACA,WAAIH,CAAC,GAAC,CAAN,EAASA,CAAC,GAAG,KAAKL,KAAL,CAAWM,KAAxB,EAA+BD,CAAC,EAAhC,EAAmC;AACjC,YAAIE,GAAG,GAAG,EAAV;;AADiC;AAG/B,cAAIO,KAAK,aAAMT,CAAN,cAAWG,CAAX,CAAT;AACAD,UAAAA,GAAG,CAACG,IAAJ,eACA,oBAAC,IAAD;AACE,YAAA,GAAG,EAAEI,KADP;AAEE,YAAA,KAAK,EAAE,MAAI,CAACb,KAAL,CAAWE,KAAX,CAAiBE,CAAjB,EAAoBG,CAApB,CAFT;AAGE,YAAA,eAAe,EAAI;AAAA,qBAAM,MAAI,CAACgB,eAAL,CAAqBV,KAArB,CAAN;AAAA;AAHrB,YADA;AAJ+B;;AAEjC,aAAKN,CAAC,GAAC,CAAP,EAAUA,CAAC,GAAG,KAAKR,KAAL,CAAWS,KAAzB,EAAgCD,CAAC,EAAjC,EAAoC;AAAA;AASnC;;AACDe,QAAAA,UAAU,CAACb,IAAX,eAAgB;AAAI,UAAA,GAAG,EAAEF;AAAT,WAAaD,GAAb,CAAhB;AACD;;AACD,0BACE;AAAO,QAAA,SAAS,EAAC;AAAjB,sBACE,mCAAQgB,UAAR,CADF,CADF;AAKD;;;;EA7EiB1B,S;;AAAdE,K,CAEG0B,Y,GAAe;AACpBnB,EAAAA,KAAK,EAAE,CADa;AAEpBG,EAAAA,KAAK,EAAE,CAFa;AAGpBI,EAAAA,mBAAmB,EAAE;AAHD,C;AA8ExB,eAAed,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  //? Create a default constructor\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    changeLightStartsOn: 0.25\n  };\n  constructor(props) {\n    super(props);\n    //? Create initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    for (let i = 0; i < this.props.nrows; i++) {\n      let row = [];\n      for (let j = 0; j < this.props.ncols; j++) {\n        row.push(Math.random() < this.props.changeLightStartsOn); // will push true if the rand is < 0.25\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    console.log('Flipping',coord);\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split('-').map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    let tableBoard = [];\n    let i,j;\n    for(i=0; i < this.props.nrows; i++){\n      let row = [];\n      for( j=0; j < this.props.ncols; j++){\n        let coord = `${i}-${j}`;\n        row.push(\n        <Cell \n          key={coord} \n          isLit={this.state.board[i][j]} \n          flipCellsAround = {() => this.flipCellsAround(coord)}\n          />\n          );\n      }\n      tableBoard.push(<tr key={j}>{row}</tr>)\n    }\n    return (\n      <table className=\"Board\">\n        <tbody>{tableBoard}</tbody>\n      </table>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}